package com.xoab.imageObjectDetection.controller;

import com.xoab.imageObjectDetection.dto.responseDTOs.SingleImageDataDTO;
import com.xoab.imageObjectDetection.service.ImageService;
import com.xoab.imageObjectDetection.dto.ImageRequestDTO;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@RestController
@RequestMapping("/images")
@Slf4j
public class ImageController {

    @Autowired
    ImageService imageService;

    /**
     * Returns a JSON response containing all image metadata, or, if 'objects' are specified, a response body containing
     * only images that have the detected objects specified in the query
     * parameter
     * @param objects
     * @return
     */
    @GetMapping
    public ResponseEntity getImagesWithObjects(@RequestParam(required = false) String objects){
        if (objects == null){
            return imageService.getAllImageMetadata();
        } else {
            String[] separateObjects = objects.split(",");
            return imageService.getMatchingImages(separateObjects);
        }
    }

    /**
     * Returns a JSON response containing image metadata for the specified image
     * @param imageId
     * @return
     */
    @GetMapping("/{imageId}")
    public ResponseEntity getImageMetadata(@PathVariable Integer imageId){
        return imageService.getImageMetadata(imageId);
    }

    /**
     * Accepts a JSON request body including an image file OR url, an optional label for the image, and an optional
     * field to enable object detection.
     *
     * Returns a JSON response body including the image data, its label (autogenerated if not provided), database ID,
     * and any objects detected (IF object detection was enabled)
     *
     * @param imageRequestDTO
     * @return
     */
    @PostMapping
    public ResponseEntity addImage(@RequestBody @Valid ImageRequestDTO imageRequestDTO){
        // Make sure the file can be downloaded first
        try {
            String localFilePath = imageService.downloadFile(imageRequestDTO);

            SingleImageDataDTO singleImageDataDTO = imageService.addImage(imageRequestDTO, localFilePath);

            if (singleImageDataDTO != null) {
                return ResponseEntity.ok(singleImageDataDTO);
            } else {
                return ResponseEntity.internalServerError().build();
            }

        } catch (IOException e) {
            log.error("Unable to download file", e);
            return ResponseEntity.unprocessableEntity().build();
        }
    }
}
